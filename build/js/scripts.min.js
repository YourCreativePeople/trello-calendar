/*
    events.js

    Description: Contains the jquery event handlers needed
    Author: Tory Martin
*/

$("#connectLink").click(function(){
    Trello.authorize({
        type: "popup",
        success: onAuthorize
    });
});

$("#disconnect").click(logout);

/*
    ractive.js

    Description: Contains the ractive for the app
    Author: Tory Martin & David Dierking
*/


/* Placeholder global */
var orgData;

/*
    Function: trelloCards

    Description: Initiates the ractive

    Parameters: n/a

    Returns: n/a
*/
var trelloCards = new Ractive({
    // The `el` option can be a node, an ID, or a CSS selector.
    el: 'container',

    // We could pass in a string, but for the sake of convenience
    // we're passing the ID of the <script> tag above.
    template: '#template',

    // Here, we're passing in some initial data
    data: {
        org: orgData,
        tempFunction: function() {},
        getBoard: function(idBoard) {
            if (trelloCards.data.org.boards[idBoard].name !== '')
                return trelloCards.data.org.boards[idBoard].name;
            else
                return "Board in another org";

        },
        formatDate: function(d){
            return d.format("DD - MMM");
        },
        /* Generate Table */
        renderRows:function(mem){
            var s = "";
            for(var i=0;i<mem.Rows.length;i++){
                var row = mem.Rows[i];
                s += "<tr>";
                if(i == 0)
                    s += "<td rowspan=\"" + mem.Rows.length.toString() + "\">" + mem.fullName + "</td>";
                for(var c=0;c<row.Columns.length;c++){
                    var column = row.Columns[c];
                    s += "<td colspan=\"" + column.Span.toString() + "\">";

                    var bID = column.BoardID;
                    if(bID !== ''){
                        var b = trelloCards.data.org.boards[column.BoardID];
                        if (b.name !== '')
                            s += b.name;
                        else
                            s += "Board in another org";
                    }

                    s += "</td>";
                }
                s += "</tr>";

            }
            return s;
        }
    }
});

/* Ractive Events */
trelloCards.on({
    change: function(event) {

    }
});

/* Ractive Observers */
trelloCards.observe( 'org', function( items ) {
    /* Save to localstorage */
    if (trelloCards.data.org)
        localStorage['trelloCalendar'] = JSON.stringify(trelloCards.data.org);

});

trelloCards.observe( 'org.boards', function( items ) {
    /* Save to localstorage */
    if (trelloCards.data.org)
        localStorage['trelloCalendar'] = JSON.stringify(trelloCards.data.org);
});
/*
    scripts.js

    Description: Main data processing scripts
    Author: Tory Martin & David Dierking
*/

var Days = [];
function getWeeks(){
	var today = moment();
	var begin = moment(today).isoWeekday(1);

	var curDate = begin;
	var numWeeks = 2;
	var weeks = [];
	for(var i=0;i<numWeeks;i++){
		var w = {};
		w.WeekNumber = curDate.isoWeek();
		var days = [];
		for(var d=0;d<5;d++){
			days.push(curDate);
			w.Days = days;
			Days.push(curDate);
			curDate = moment(curDate).add('days', 1);
		}
		weeks.push(w);
		curDate = moment(curDate).add('days', 2);
	}

	trelloCards.set({
            weeks: weeks
        });
}

function getDateIndex(d){
	for(var i=0;i<Days.length;i++){
		if(Days[i].isSame(moment(d), "day"))
			return i;
	}
	return -1;
}

function cardIsInRange(card){
	return !card.StartDate.isAfter(Days[Days.length - 1], "day")
		&&
		!card.EndDate.isBefore(Days[0], "day");
}

function newRow(){
	var row = {};
	row.Columns = [];
	for(var i=0;i<Days.length;i++){
		var column = new Object();
		column.Span = 1;
		column.StartDate = Days[i];
		column.EndDate = Days[i];
		column.BoardID = "";
		row.Columns.push(column);

	}
	return row;
}

function rowToUse(member, card){
	for(var i=0;i<member.Rows.length;i++){
		var canUse = true;
		var r = member.Rows[i];
		for(var c=0;c<r.Columns.length;c++){
			var column = r.Columns[c];
			if(column.BoardID !== '' &&
				!card.StartDate.isAfter(column.EndDate, "day")
				&&
				!card.EndDate.isBefore(column.StartDate, "day")
			){
				canUse = false;
				break;
			}
		}
		if(canUse)
			return r;
	}

	var row = newRow();
	member.Rows.push(row);
	return row;
}

function addWeekdays(date, days) {
    date = moment(date); // use a clone
    if(days < 0){
        while (days < 0) {
            date = date.add(-1, 'days');
            // decrease "days" only if it's a weekday.
            if (date.isoWeekday() !== 6 && date.isoWeekday() !== 7) {
                days += 1;
            }
        }
    } else if(days > 0) {
        while (days > 0) {
            date = date.add(1, 'days');
            // decrease "days" only if it's a weekday.
            if (date.isoWeekday() !== 6 && date.isoWeekday() !== 7) {
                days -= 1;
            }
        }
    }
    return date;
}

function addToColumn(row, card){
	var columnToUse;
	var toRemove = [];
	if(card.StartDate.isBefore(Days[0], "day"))
		card.StartDate = moment(Days[0]);
	for(var i=0;i<row.Columns.length;i++){
		var isSameAsStart = row.Columns[i].StartDate.isSame(card.StartDate, "day");
		var isAfterStart = row.Columns[i].StartDate.isAfter(card.StartDate, "day");
		var isSameAsEnd = row.Columns[i].StartDate.isSame(card.EndDate, "day");
		if(isSameAsStart){
			columnToUse = row.Columns[i];
			columnToUse.BoardID = card.idBoard;
			columnToUse.Span = 1;
			if(isSameAsEnd)
				break;
		}
		if(isAfterStart)
		{
			columnToUse.EndDate = row.Columns[i].StartDate;
			columnToUse.Span = columnToUse.Span + 1;
			toRemove.push(i);
			if(isSameAsEnd)
				break;
		}
	}
	for(var j=toRemove.length - 1; j>=0 ; j--){
		row.Columns.splice(toRemove[j], 1);
	}
}

function processMemberCards(member){

	member.Rows = [];

	for(var i=0;i<member.cards.length;i++){
		var card = member.cards[i];
		card.EndDate = moment(card.due);
		if(card.desc){
			var d = card.desc.replace(/ /g,'').toLowerCase();
			var dString = "duration:";
			var ind = d.indexOf(dString);
			if(ind > -1){
				ind = ind + dString.length;
				d = d.substring(ind);
				var dInd = d.indexOf("d");
				if(dInd > 0){
					try{
						var dNum = parseInt(d.substring(0, dInd));
						card.StartDate = addWeekdays(card.EndDate, -(dNum - 1));
					}catch(e){}
				}
			}
		}
		if(typeof card.StartDate === 'undefined')
			card.StartDate = moment(card.EndDate);

		if(cardIsInRange(card))
			addToColumn(rowToUse(member, card), card);
	}
}

/*
    trello_api.js

    Description: Contains the code for querying the Trello API
    Author: Tory Martin
*/

/* Initial call to Trello Authorize
    - Pulled from localstorage */
Trello.authorize({
    interactive: false,
    success: onAuthorize
});

/*
    Description: gets specified data from Trello Api
*/
Trello.get("organizations/ycp", {
        fields: 'displayName,url',
        boards: 'open', board_fields: 'name,desc,shortUrl',
        members: 'all', member_fields: 'username,fullName'
}, function(org) {
    var boards = org.boards;
    var boards_new = {};
    delete org.boards;

    org.boards = {};

    for (var i = 0; i < boards.length; i++) {
        boards_new[boards[i].id] = boards[i];
        delete boards_new[boards[i].id].id;
    }

    org.boards = boards_new;



    getWeeks();

    //var member = org.members[0];
    // Loop through org members and add cards
    $.each(org.members, function(ix, member) {
        member.cards = new Array();
        Trello.get("members/" + member.id + "/cards", {

                fields: "name,url,due,desc,idBoard"
        }, function(cards) {

            // Remove cards without due date and not in current range
            for (var i = cards.length - 1; i >= 0; i--) {
                var card = cards[i];
                if (card.due === null)
                    cards.splice(i, 1);
                else
                    card.due = new Date(card.due);
            }

            member.cards = cards;

            processMemberCards(member);


            trelloCards.set({
                org: org
            });

        });
    });

    trelloCards.update();
});

/* Helper functions */
var onAuthorize = function() {
    updateLoggedIn();
};

var updateLoggedIn = function() {
    /* Fill first name */
    Trello.members.get("me", function(member){
        console.log(member);
        $("#fullName").text(member.fullName);
    });

    var isLoggedIn = Trello.authorized();
    $(".loggedout").toggle(!isLoggedIn);
    $(".loggedin").toggle(isLoggedIn);
};

var logout = function() {
    Trello.deauthorize();
    updateLoggedIn();
};
